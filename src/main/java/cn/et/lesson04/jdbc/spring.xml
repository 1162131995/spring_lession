<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:aop="http://www.springframework.org/schema/aop"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:context="http://www.springframework.org/schema/context"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop-4.2.xsd
        
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx-4.1.xsd
        
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context-4.2.xsd">
        
    <context:property-placeholder location="classpath:jdbc_mysql.properties"/>
	<context:component-scan base-package="cn.et.lesson04"></context:component-scan>
    <bean id="dataSource"
		class="org.springframework.jdbc.datasource.DriverManagerDataSource">

		<property name="driverClassName" value="${driverClass}" />

		<property name="url" value="${url}" />

		<property name="username" value="${username1}" />

		<property name="password" value="${password1}" />
		
	</bean>
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="dataSource"></property>
	</bean>
	<!-- 事务管理器，不再使用jdbc提供的commit和rollback -->
	<bean id="transactionManager" 
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"></property>
		</bean>
	<!-- 定义通知，通知的代码spring已实现 -->
	<tx:advice id="myAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<!-- 
				propagation:
					REQUIRED ：如果有事务就使用当前事务，没有就创建新事务
					REQUIRES_NEW：无论当前是否存在事务，都会创建新事务
					SUPPORTS：如果父方法存在事务就使用父方法的事务，没有就使用jdbc的事务
					NOT_SUPPORTED：不管是否存在事务，都不会使用事务（挂起事务）
					MANDATORY：必须在事务环境下运行，如果父方法没有事务会抛出异常
					NEVER：父方法不能存在事务，否则抛出异常
					NESTED
				isolation:
					DEFAULT：使用数据库本身的隔离级别（建议使用）
					READ_UNCOMMITTED：spring实现读未提交
					READ_COMMITTED：spring实现读已提交
					REPEATABLE_READ：spring实现可重复读
					SERIALIZABLE：spring实现串行化
					
				只读事务（除了特定方法外，其他方法都不应该操作业务）
					read-only="true"
			 -->
			<tx:method name="update*" propagation="REQUIRED" isolation="DEFAULT"/>
			<tx:method name="save*"/>
			<tx:method name="delete*"/>
			<tx:method name="*" read-only="true"/>
		</tx:attributes>
	</tx:advice>
	
	<aop:config>
		<aop:pointcut expression="execution(* cn.et.lesson04.jdbc.dao.MyMoneyDao.*(..))" id="pointCut"/>
		<aop:advisor advice-ref="myAdvice" pointcut-ref="pointCut"/>
	</aop:config>
	
	
</beans>